// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  admin
  user
}

model User {
  id           Int                 @id @default(autoincrement())
  username     String              @unique
  email        String              @unique
  password     String
  role         Role
  Subscription subscription_user[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

model Film {
  movie_id    Int      @id @default(autoincrement())
  movie_title String
  description String?  @db.Text
  createdAt   DateTime @default(now())
  deletedAt   DateTime @default(now())
  movie_url   String
  uploadAt    DateTime @default(now())
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
}

model Category {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAT DateTime @updatedAt
  name     String   @unique
  films    Film[]
}

model blackListToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
}

model subscription {
  id           Int                 @id @default(autoincrement())
  name         String              @unique
  createdAt    DateTime            @default(now())
  UpdatedAt    DateTime            @updatedAt
  Subscription subscription_user[]
}

model subscription_user {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  subscription   subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId Int
  User           User         @relation(fields: [userId], references: [id])
  userId         Int
}
